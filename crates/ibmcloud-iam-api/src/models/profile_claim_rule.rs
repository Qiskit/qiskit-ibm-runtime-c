/*
 * IAM Identity Services
 *
 * The IAM Identity Service API allows for the management of Account Settings and Identities (Service IDs, ApiKeys).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProfileClaimRule {
    /// the unique identifier of the claim rule
    #[serde(rename = "id")]
    pub id: String,
    /// version of the claim rule
    #[serde(rename = "entity_tag")]
    pub entity_tag: String,
    /// If set contains a date time string of the creation date in ISO format.
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// If set contains a date time string of the last modification date in ISO format.
    #[serde(rename = "modified_at", skip_serializing_if = "Option::is_none")]
    pub modified_at: Option<String>,
    /// The optional claim rule name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Type of the claim rule, either 'Profile-SAML' or 'Profile-CR'
    #[serde(rename = "type")]
    pub r#type: String,
    /// The realm name of the Idp this claim rule applies to
    #[serde(rename = "realm_name", skip_serializing_if = "Option::is_none")]
    pub realm_name: Option<String>,
    /// Session expiration in seconds
    #[serde(rename = "expiration")]
    pub expiration: i32,
    /// The compute resource type. Not required if type is Profile-SAML. Valid values are VSI, IKS_SA, ROKS_SA.
    #[serde(rename = "cr_type", skip_serializing_if = "Option::is_none")]
    pub cr_type: Option<String>,
    /// Conditions of this claim rule.
    #[serde(rename = "conditions")]
    pub conditions: Vec<models::ProfileClaimRuleConditions>,
}

impl ProfileClaimRule {
    pub fn new(
        id: String,
        entity_tag: String,
        created_at: String,
        r#type: String,
        expiration: i32,
        conditions: Vec<models::ProfileClaimRuleConditions>,
    ) -> ProfileClaimRule {
        ProfileClaimRule {
            id,
            entity_tag,
            created_at,
            modified_at: None,
            name: None,
            r#type,
            realm_name: None,
            expiration,
            cr_type: None,
            conditions,
        }
    }
}
