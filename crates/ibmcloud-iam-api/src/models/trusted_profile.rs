/*
 * IAM Identity Services
 *
 * The IAM Identity Service API allows for the management of Account Settings and Identities (Service IDs, ApiKeys).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TrustedProfile : Response body format for trusted profile V1 REST requests.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TrustedProfile {
    #[serde(rename = "context", skip_serializing_if = "Option::is_none")]
    pub context: Option<Box<models::ResponseContext>>,
    /// the unique identifier of the trusted profile. Example:'Profile-94497d0d-2ac3-41bf-a993-a49d1b14627c'
    #[serde(rename = "id")]
    pub id: String,
    /// Version of the trusted profile details object. You need to specify this value when updating the trusted profile to avoid stale updates.
    #[serde(rename = "entity_tag")]
    pub entity_tag: String,
    /// Cloud Resource Name of the item. Example Cloud Resource Name: 'crn:v1:bluemix:public:iam-identity:us-south:a/myaccount::profile:Profile-94497d0d-2ac3-41bf-a993-a49d1b14627c'
    #[serde(rename = "crn")]
    pub crn: String,
    /// Name of the trusted profile. The name is checked for uniqueness. Therefore trusted profiles with the same names can not exist in the same account.
    #[serde(rename = "name")]
    pub name: String,
    /// The optional description of the trusted profile. The 'description' property is only available if a description was provided during a create of a trusted profile.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The optional email of the trusted profile. The 'email' property is only available if an email was provided during a create of a trusted profile.
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    /// If set contains a date time string of the creation date in ISO format.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// If set contains a date time string of the last modification date in ISO format.
    #[serde(rename = "modified_at", skip_serializing_if = "Option::is_none")]
    pub modified_at: Option<String>,
    /// The iam_id of this trusted profile.
    #[serde(rename = "iam_id")]
    pub iam_id: String,
    /// ID of the account that this trusted profile belong to.
    #[serde(rename = "account_id")]
    pub account_id: String,
    /// ID of the IAM template that was used to create an enterprise-managed trusted profile in your account. When returned, this indicates that the trusted profile is created from and managed by a template in the root enterprise account.
    #[serde(rename = "template_id", skip_serializing_if = "Option::is_none")]
    pub template_id: Option<String>,
    /// ID of the assignment that was used to create an enterprise-managed trusted profile in your account. When returned, this indicates that the trusted profile is created from and managed by a template in the root enterprise account.
    #[serde(rename = "assignment_id", skip_serializing_if = "Option::is_none")]
    pub assignment_id: Option<String>,
    /// IMS acount ID of the trusted profile
    #[serde(rename = "ims_account_id", skip_serializing_if = "Option::is_none")]
    pub ims_account_id: Option<i64>,
    /// IMS user ID of the trusted profile
    #[serde(rename = "ims_user_id", skip_serializing_if = "Option::is_none")]
    pub ims_user_id: Option<i64>,
    /// History of the trusted profile.
    #[serde(rename = "history", skip_serializing_if = "Option::is_none")]
    pub history: Option<Vec<models::EnityHistoryRecord>>,
    #[serde(rename = "activity", skip_serializing_if = "Option::is_none")]
    pub activity: Option<Box<models::Activity>>,
}

impl TrustedProfile {
    /// Response body format for trusted profile V1 REST requests.
    pub fn new(
        id: String,
        entity_tag: String,
        crn: String,
        name: String,
        iam_id: String,
        account_id: String,
    ) -> TrustedProfile {
        TrustedProfile {
            context: None,
            id,
            entity_tag,
            crn,
            name,
            description: None,
            email: None,
            created_at: None,
            modified_at: None,
            iam_id,
            account_id,
            template_id: None,
            assignment_id: None,
            ims_account_id: None,
            ims_user_id: None,
            history: None,
            activity: None,
        }
    }
}
