/*
 * IAM Identity Services
 *
 * The IAM Identity Service API allows for the management of Account Settings and Identities (Service IDs, ApiKeys).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ServiceId : Response body format for service ID V1 REST requests.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServiceId {
    #[serde(rename = "context", skip_serializing_if = "Option::is_none")]
    pub context: Option<Box<models::ResponseContext>>,
    /// Unique identifier of this Service Id.
    #[serde(rename = "id")]
    pub id: String,
    /// Cloud wide identifier for identities of this service ID.
    #[serde(rename = "iam_id")]
    pub iam_id: String,
    /// Version of the service ID details object. You need to specify this value when updating the service ID to avoid stale updates.
    #[serde(rename = "entity_tag")]
    pub entity_tag: String,
    /// Cloud Resource Name of the item. Example Cloud Resource Name: 'crn:v1:bluemix:public:iam-identity:us-south:a/myaccount::serviceid:1234-5678-9012'
    #[serde(rename = "crn")]
    pub crn: String,
    /// The service ID cannot be changed if set to true.
    #[serde(rename = "locked")]
    pub locked: bool,
    /// If set contains a date time string of the creation date in ISO format.
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// If set contains a date time string of the last modification date in ISO format.
    #[serde(rename = "modified_at")]
    pub modified_at: String,
    /// ID of the account the service ID belongs to.
    #[serde(rename = "account_id")]
    pub account_id: String,
    /// Name of the Service Id. The name is not checked for uniqueness. Therefore multiple names with the same value can exist. Access is done via the UUID of the Service Id.
    #[serde(rename = "name")]
    pub name: String,
    /// The optional description of the Service Id. The 'description' property is only available if a description was provided during a create of a Service Id.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Optional list of CRNs (string array) which point to the services connected to the service ID.
    #[serde(
        rename = "unique_instance_crns",
        skip_serializing_if = "Option::is_none"
    )]
    pub unique_instance_crns: Option<Vec<String>>,
    /// History of the Service ID.
    #[serde(rename = "history", skip_serializing_if = "Option::is_none")]
    pub history: Option<Vec<models::EnityHistoryRecord>>,
    #[serde(rename = "apikey", skip_serializing_if = "Option::is_none")]
    pub apikey: Option<Box<models::ApiKey>>,
    #[serde(rename = "activity", skip_serializing_if = "Option::is_none")]
    pub activity: Option<Box<models::Activity>>,
}

impl ServiceId {
    /// Response body format for service ID V1 REST requests.
    pub fn new(
        id: String,
        iam_id: String,
        entity_tag: String,
        crn: String,
        locked: bool,
        created_at: String,
        modified_at: String,
        account_id: String,
        name: String,
    ) -> ServiceId {
        ServiceId {
            context: None,
            id,
            iam_id,
            entity_tag,
            crn,
            locked,
            created_at,
            modified_at,
            account_id,
            name,
            description: None,
            unique_instance_crns: None,
            history: None,
            apikey: None,
            activity: None,
        }
    }
}
