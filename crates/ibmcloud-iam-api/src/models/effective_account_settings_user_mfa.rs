/*
 * IAM Identity Services
 *
 * The IAM Identity Service API allows for the management of Account Settings and Identities (Service IDs, ApiKeys).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EffectiveAccountSettingsUserMfa {
    /// The iam_id of the user.
    #[serde(rename = "iam_id")]
    pub iam_id: String,
    /// Defines the MFA requirement for the user. Valid values:   * NONE - No MFA trait set   * NONE_NO_ROPC- No MFA, disable CLI logins with only a password   * TOTP - For all non-federated IBMId users   * TOTP4ALL - For all users   * LEVEL1 - Email-based MFA for all users   * LEVEL2 - TOTP-based MFA for all users   * LEVEL3 - U2F MFA for all users
    #[serde(rename = "mfa")]
    pub mfa: Mfa,
    /// name of the user account.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// userName of the user.
    #[serde(rename = "userName", skip_serializing_if = "Option::is_none")]
    pub user_name: Option<String>,
    /// email of the user.
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    /// optional description.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}

impl EffectiveAccountSettingsUserMfa {
    pub fn new(iam_id: String, mfa: Mfa) -> EffectiveAccountSettingsUserMfa {
        EffectiveAccountSettingsUserMfa {
            iam_id,
            mfa,
            name: None,
            user_name: None,
            email: None,
            description: None,
        }
    }
}
/// Defines the MFA requirement for the user. Valid values:   * NONE - No MFA trait set   * NONE_NO_ROPC- No MFA, disable CLI logins with only a password   * TOTP - For all non-federated IBMId users   * TOTP4ALL - For all users   * LEVEL1 - Email-based MFA for all users   * LEVEL2 - TOTP-based MFA for all users   * LEVEL3 - U2F MFA for all users
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Mfa {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "NONE_NO_ROPC")]
    NoneNoRopc,
    #[serde(rename = "TOTP")]
    Totp,
    #[serde(rename = "TOTP4ALL")]
    Totp4All,
    #[serde(rename = "LEVEL1")]
    Level1,
    #[serde(rename = "LEVEL2")]
    Level2,
    #[serde(rename = "LEVEL3")]
    Level3,
}

impl Default for Mfa {
    fn default() -> Mfa {
        Self::None
    }
}
