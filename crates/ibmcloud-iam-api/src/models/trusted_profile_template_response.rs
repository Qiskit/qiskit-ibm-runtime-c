/*
 * IAM Identity Services
 *
 * The IAM Identity Service API allows for the management of Account Settings and Identities (Service IDs, ApiKeys).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TrustedProfileTemplateResponse : Response body format for Trusted Profile Template REST requests
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TrustedProfileTemplateResponse {
    /// ID of the the template
    #[serde(rename = "id")]
    pub id: String,
    /// Version of the the template
    #[serde(rename = "version")]
    pub version: i64,
    /// ID of the account where the template resides.
    #[serde(rename = "account_id")]
    pub account_id: String,
    /// The name of the trusted profile template. This is visible only in the enterprise account.
    #[serde(rename = "name")]
    pub name: String,
    /// The description of the trusted profile template. Describe the template for enterprise account users.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Committed flag determines if the template is ready for assignment
    #[serde(rename = "committed", skip_serializing_if = "Option::is_none")]
    pub committed: Option<bool>,
    #[serde(rename = "profile", skip_serializing_if = "Option::is_none")]
    pub profile: Option<Box<models::TemplateProfileComponentResponse>>,
    /// Existing policy templates that you can reference to assign access in the trusted profile component.
    #[serde(
        rename = "policy_template_references",
        skip_serializing_if = "Option::is_none"
    )]
    pub policy_template_references: Option<Vec<models::PolicyTemplateReference>>,
    #[serde(rename = "action_controls", skip_serializing_if = "Option::is_none")]
    pub action_controls: Option<models::ActionControls>,
    /// History of the trusted profile template.
    #[serde(rename = "history", skip_serializing_if = "Option::is_none")]
    pub history: Option<Vec<models::EnityHistoryRecord>>,
    /// Entity tag for this templateId-version combination
    #[serde(rename = "entity_tag", skip_serializing_if = "Option::is_none")]
    pub entity_tag: Option<String>,
    /// Cloud resource name
    #[serde(rename = "crn", skip_serializing_if = "Option::is_none")]
    pub crn: Option<String>,
    /// Timestamp of when the template was created
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// IAMid of the creator
    #[serde(rename = "created_by_id", skip_serializing_if = "Option::is_none")]
    pub created_by_id: Option<String>,
    /// Timestamp of when the template was last modified
    #[serde(rename = "last_modified_at", skip_serializing_if = "Option::is_none")]
    pub last_modified_at: Option<String>,
    /// IAMid of the identity that made the latest modification
    #[serde(
        rename = "last_modified_by_id",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_modified_by_id: Option<String>,
}

impl TrustedProfileTemplateResponse {
    /// Response body format for Trusted Profile Template REST requests
    pub fn new(
        id: String,
        version: i64,
        account_id: String,
        name: String,
    ) -> TrustedProfileTemplateResponse {
        TrustedProfileTemplateResponse {
            id,
            version,
            account_id,
            name,
            description: None,
            committed: None,
            profile: None,
            policy_template_references: None,
            action_controls: None,
            history: None,
            entity_tag: None,
            crn: None,
            created_at: None,
            created_by_id: None,
            last_modified_at: None,
            last_modified_by_id: None,
        }
    }
}
