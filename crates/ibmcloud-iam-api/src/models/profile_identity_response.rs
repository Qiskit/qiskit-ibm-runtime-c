/*
 * IAM Identity Services
 *
 * The IAM Identity Service API allows for the management of Account Settings and Identities (Service IDs, ApiKeys).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProfileIdentityResponse {
    /// IAM ID of the identity
    #[serde(rename = "iam_id")]
    pub iam_id: String,
    /// Identifier of the identity that can assume the trusted profiles. This can be a user identifier (IAM id), serviceid or crn. Internally it uses account id of the service id for the identifier 'serviceid' and for the identifier 'crn' it uses account id contained in the CRN.
    #[serde(rename = "identifier")]
    pub identifier: String,
    /// Type of the identity
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Only valid for the type user. Accounts from which a user can assume the trusted profile.
    #[serde(rename = "accounts", skip_serializing_if = "Option::is_none")]
    pub accounts: Option<Vec<String>>,
    /// Description of the identity that can assume the trusted profile. This is optional field for all the types of identities. When this field is not set for the identity type 'serviceid' then the description of the service id is used. Description is recommended for the identity type 'crn' E.g. 'Instance 1234 of IBM Cloud Service project'
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}

impl ProfileIdentityResponse {
    pub fn new(iam_id: String, identifier: String, r#type: Type) -> ProfileIdentityResponse {
        ProfileIdentityResponse {
            iam_id,
            identifier,
            r#type,
            accounts: None,
            description: None,
        }
    }
}
/// Type of the identity
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "user")]
    User,
    #[serde(rename = "serviceid")]
    Serviceid,
    #[serde(rename = "crn")]
    Crn,
}

impl Default for Type {
    fn default() -> Type {
        Self::User
    }
}
