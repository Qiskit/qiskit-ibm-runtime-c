/*
 * Global Search
 *
 * Search for resources with the global and shared resource properties repository that is integrated in the IBM Cloud platform. The search repository stores and searches cloud resources attributes, which categorize or classify resources. A resource is a physical or logical component that can be created or reserved for an application or service instance. They are owned by resource providers, such as IBM Kubernetes Service, or resource controller in IBM Cloud. Resources are uniquely identified by a Cloud Resource Name (CRN) or by an IMS ID. The properties of a resource include tags and system properties. Both properties are defined in an IBM Cloud billing account, and span across many regions.
 *
 * The version of the OpenAPI document: 2.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`search`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchError {
    Status400(models::Errors),
    Status401(models::Errors),
    Status403(models::Errors),
    Status429(String),
    Status500(models::Errors),
    Status502(models::Errors),
    DefaultResponse(models::Errors),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v2_search`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V2SearchError {
    Status400(models::Errors),
    Status401(models::Errors),
    Status403(models::Errors),
    Status429(String),
    Status500(models::Errors),
    Status502(models::Errors),
    DefaultResponse(models::Errors),
    UnknownValue(serde_json::Value),
}

/// Find IAM-enabled resources or storage and network resources that run on classic infrastructure in a specific account ID.  You must use `/v3/resources/search` when you need to fetch more than `10000` resource items. On the first call, the operation returns a live cursor on the data that you must use on all the subsequent calls to get the next batch of results until you get the empty result set.  To filter results, you can apply query strings following the *Lucene* query syntax.  By default, the fields that are returned for every resource are **crn**, **name**, **family**, **type**, and **account_id**. You can specify the subset of the fields you want in your request using the `fields` request body attribute. Set `\"fields\": [\"*\"]` to discover the complete set of fields which are available to request.
pub async fn search(
    configuration: &configuration::Configuration,
    body: models::SearchRequest,
    x_request_id: Option<&str>,
    x_correlation_id: Option<&str>,
    account_id: Option<&str>,
    limit: Option<i32>,
    timeout: Option<i32>,
    sort: Option<Vec<String>>,
    is_deleted: Option<&str>,
    is_reclaimed: Option<&str>,
    is_public: Option<&str>,
    impersonate_user: Option<&str>,
    can_tag: Option<&str>,
    is_project_resource: Option<&str>,
) -> Result<models::ScanResult, Error<SearchError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;
    let p_x_request_id = x_request_id;
    let p_x_correlation_id = x_correlation_id;
    let p_account_id = account_id;
    let p_limit = limit;
    let p_timeout = timeout;
    let p_sort = sort;
    let p_is_deleted = is_deleted;
    let p_is_reclaimed = is_reclaimed;
    let p_is_public = is_public;
    let p_impersonate_user = impersonate_user;
    let p_can_tag = can_tag;
    let p_is_project_resource = is_project_resource;

    let uri_str = format!("{}/v3/resources/search", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_account_id {
        req_builder = req_builder.query(&[("account_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_timeout {
        req_builder = req_builder.query(&[("timeout", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort {
        req_builder = match "csv" {
            "multi" => req_builder.query(
                &param_value
                    .iter()
                    .map(|p| ("sort".to_owned(), p.to_string()))
                    .collect::<Vec<(std::string::String, std::string::String)>>(),
            ),
            _ => req_builder.query(&[(
                "sort",
                &param_value
                    .iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]),
        };
    }
    if let Some(ref param_value) = p_is_deleted {
        req_builder = req_builder.query(&[("is_deleted", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_is_reclaimed {
        req_builder = req_builder.query(&[("is_reclaimed", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_is_public {
        req_builder = req_builder.query(&[("is_public", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_impersonate_user {
        req_builder = req_builder.query(&[("impersonate_user", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_can_tag {
        req_builder = req_builder.query(&[("can_tag", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_is_project_resource {
        req_builder = req_builder.query(&[("is_project_resource", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_x_request_id {
        req_builder = req_builder.header("x-request-id", param_value.to_string());
    }
    if let Some(param_value) = p_x_correlation_id {
        req_builder = req_builder.header("x-correlation-id", param_value.to_string());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ScanResult`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ScanResult`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Find IAM-enabled resources or storage and network resources that run on classic infrastructure in a specific account ID.  To filter results, you can apply query strings following the *Lucene* query syntax.  Only resources that belong to the account ID and that are accessible by the client are returned.  The usage of this API is deprecated for cases when the provider is not specified or `provider=ghost`. `/v3/resources/search` replaces this API for the deprecated cases.
pub async fn v2_search(
    configuration: &configuration::Configuration,
    body: models::SearchBody,
    x_request_id: Option<&str>,
    x_correlation_id: Option<&str>,
    account_id: Option<&str>,
    limit: Option<i32>,
    timeout: Option<i32>,
    is_deleted: Option<&str>,
    is_reclaimed: Option<&str>,
    is_public: Option<&str>,
    impersonate_user: Option<&str>,
    can_tag: Option<&str>,
    is_project_resource: Option<&str>,
    offset: Option<i32>,
    sort: Option<&str>,
    x_ims_auth_token: Option<&str>,
    provider: Option<&str>,
) -> Result<models::SearchResults, Error<V2SearchError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body = body;
    let p_x_request_id = x_request_id;
    let p_x_correlation_id = x_correlation_id;
    let p_account_id = account_id;
    let p_limit = limit;
    let p_timeout = timeout;
    let p_is_deleted = is_deleted;
    let p_is_reclaimed = is_reclaimed;
    let p_is_public = is_public;
    let p_impersonate_user = impersonate_user;
    let p_can_tag = can_tag;
    let p_is_project_resource = is_project_resource;
    let p_offset = offset;
    let p_sort = sort;
    let p_x_ims_auth_token = x_ims_auth_token;
    let p_provider = provider;

    let uri_str = format!("{}/v2/resources/search", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_account_id {
        req_builder = req_builder.query(&[("account_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_timeout {
        req_builder = req_builder.query(&[("timeout", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_is_deleted {
        req_builder = req_builder.query(&[("is_deleted", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_is_reclaimed {
        req_builder = req_builder.query(&[("is_reclaimed", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_is_public {
        req_builder = req_builder.query(&[("is_public", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_impersonate_user {
        req_builder = req_builder.query(&[("impersonate_user", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_can_tag {
        req_builder = req_builder.query(&[("can_tag", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_is_project_resource {
        req_builder = req_builder.query(&[("is_project_resource", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_offset {
        req_builder = req_builder.query(&[("offset", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort {
        req_builder = req_builder.query(&[("sort", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_provider {
        req_builder = req_builder.query(&[("provider", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_x_request_id {
        req_builder = req_builder.header("x-request-id", param_value.to_string());
    }
    if let Some(param_value) = p_x_correlation_id {
        req_builder = req_builder.header("x-correlation-id", param_value.to_string());
    }
    if let Some(param_value) = p_x_ims_auth_token {
        req_builder = req_builder.header("X-IMS-Auth-Token", param_value.to_string());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SearchResults`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SearchResults`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<V2SearchError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
