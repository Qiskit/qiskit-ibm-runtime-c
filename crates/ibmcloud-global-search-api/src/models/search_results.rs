/*
 * Global Search
 *
 * Search for resources with the global and shared resource properties repository that is integrated in the IBM Cloud platform. The search repository stores and searches cloud resources attributes, which categorize or classify resources. A resource is a physical or logical component that can be created or reserved for an application or service instance. They are owned by resource providers, such as IBM Kubernetes Service, or resource controller in IBM Cloud. Resources are uniquely identified by a Cloud Resource Name (CRN) or by an IMS ID. The properties of a resource include tags and system properties. Both properties are defined in an IBM Cloud billing account, and span across many regions.
 *
 * The version of the OpenAPI document: 2.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// SearchResults : The results of the requested search.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SearchResults {
    /// The search token to use on the next call.
    #[serde(rename = "token", skip_serializing_if = "Option::is_none")]
    pub token: Option<String>,
    /// If false, there is no more data to retrieve on the next page. If true, it's possible that there is more data to retrieve on the next page.
    #[serde(rename = "more_data")]
    pub more_data: bool,
    /// The array of results. Each item represents a resource and contains all visible properties that are associated with it.
    #[serde(rename = "items")]
    pub items: Vec<models::ResultItem>,
    /// It is set to true if the result is a partial of an IAM error when user authorization is validated on one or more resources. This field is DEPRECATED and will be removed in future versions of this API
    #[serde(rename = "filter_error")]
    pub filter_error: bool,
    /// Indicates if the result that is set might be partial or not. Value 0 means that the result set is complete. A value greater than 0 means that the result set might be incomplete. Its single bits identify the cause. The first bit means that the error is in the IAM filter. The second bit means that errors are in elasticsearch shards.
    #[serde(rename = "partial_data")]
    pub partial_data: i32,
    /// Offset parameter specified by the user
    #[serde(rename = "offset")]
    pub offset: i32,
    /// Limit parameter specified by the user
    #[serde(rename = "limit")]
    pub limit: i32,
}

impl SearchResults {
    /// The results of the requested search.
    pub fn new(
        more_data: bool,
        items: Vec<models::ResultItem>,
        filter_error: bool,
        partial_data: i32,
        offset: i32,
        limit: i32,
    ) -> SearchResults {
        SearchResults {
            token: None,
            more_data,
            items,
            filter_error,
            partial_data,
            offset,
            limit,
        }
    }
}
