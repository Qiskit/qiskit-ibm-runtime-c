/*
 * Global Search
 *
 * Search for resources with the global and shared resource properties repository that is integrated in the IBM Cloud platform. The search repository stores and searches cloud resources attributes, which categorize or classify resources. A resource is a physical or logical component that can be created or reserved for an application or service instance. They are owned by resource providers, such as IBM Kubernetes Service, or resource controller in IBM Cloud. Resources are uniquely identified by a Cloud Resource Name (CRN) or by an IMS ID. The properties of a resource include tags and system properties. Both properties are defined in an IBM Cloud billing account, and span across many regions.
 *
 * The version of the OpenAPI document: 2.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Error : Error encountered in processing in the request
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Error {
    /// A code that identifies the error.
    #[serde(rename = "code")]
    pub code: String,
    /// The response received for the request.
    #[serde(rename = "response")]
    pub response: String,
    /// A description of the error detected in the request.
    #[serde(rename = "message")]
    pub message: String,
    /// The severity level of the error.
    #[serde(rename = "level")]
    pub level: Level,
    /// A description of the solution to the error.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// A description that contains more details about the error.
    #[serde(rename = "more_info", skip_serializing_if = "Option::is_none")]
    pub more_info: Option<String>,
}

impl Error {
    /// Error encountered in processing in the request
    pub fn new(code: String, response: String, message: String, level: Level) -> Error {
        Error {
            code,
            response,
            message,
            level,
            description: None,
            more_info: None,
        }
    }
}
/// The severity level of the error.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Level {
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "info")]
    Info,
}

impl Default for Level {
    fn default() -> Level {
        Self::Error
    }
}
