/*
 * Global Search
 *
 * Search for resources with the global and shared resource properties repository that is integrated in the IBM Cloud platform. The search repository stores and searches cloud resources attributes, which categorize or classify resources. A resource is a physical or logical component that can be created or reserved for an application or service instance. They are owned by resource providers, such as IBM Kubernetes Service, or resource controller in IBM Cloud. Resources are uniquely identified by a Cloud Resource Name (CRN) or by an IMS ID. The properties of a resource include tags and system properties. Both properties are defined in an IBM Cloud billing account, and span across many regions.
 *
 * The version of the OpenAPI document: 2.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TermsAggregationTerms {
    /// The field on which to perform the aggregation.
    #[serde(rename = "field")]
    pub field: String,
    /// The number of buckets to return, one per unique term. If you have more than 1000 different terms in the aggregating field, and you want to get them, then you must perform multiple aggregations leveraging the query parameter to aggregate on disjointed results set. For example, aggregating on the account_id field may produce a high number of buckets, depending on the query, which may exceed the limit of 1000.
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<i32>,
    /// By default, the terms aggregation orders terms by descending document count. You can also order by term in ascending and descending orders. You cannot order by document count in ascending order.
    #[serde(rename = "order", skip_serializing_if = "Option::is_none")]
    pub order: Option<Order>,
    /// Defines how documents that are missing a value should be treated. By default they will be ignored but it is also possible to treat them as if they had a value.
    #[serde(rename = "missing", skip_serializing_if = "Option::is_none")]
    pub missing: Option<String>,
}

impl TermsAggregationTerms {
    pub fn new(field: String) -> TermsAggregationTerms {
        TermsAggregationTerms {
            field,
            size: None,
            order: None,
            missing: None,
        }
    }
}
/// By default, the terms aggregation orders terms by descending document count. You can also order by term in ascending and descending orders. You cannot order by document count in ascending order.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Order {
    #[serde(rename = "count_desc")]
    CountDesc,
    #[serde(rename = "term_asc")]
    TermAsc,
    #[serde(rename = "term_desc")]
    TermDesc,
}

impl Default for Order {
    fn default() -> Order {
        Self::CountDesc
    }
}
