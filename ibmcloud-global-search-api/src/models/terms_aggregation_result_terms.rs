/*
 * Global Search
 *
 * Search for resources with the global and shared resource properties repository that is integrated in the IBM Cloud platform. The search repository stores and searches cloud resources attributes, which categorize or classify resources. A resource is a physical or logical component that can be created or reserved for an application or service instance. They are owned by resource providers, such as IBM Kubernetes Service, or resource controller in IBM Cloud. Resources are uniquely identified by a Cloud Resource Name (CRN) or by an IMS ID. The properties of a resource include tags and system properties. Both properties are defined in an IBM Cloud billing account, and span across many regions.
 *
 * The version of the OpenAPI document: 2.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TermsAggregationResultTerms {
    /// An upper bound of the error on the document counts for each term.
    #[serde(
        rename = "doc_count_error_upper_bound",
        skip_serializing_if = "Option::is_none"
    )]
    pub doc_count_error_upper_bound: Option<i32>,
    /// When there are lots of unique terms, the buckets array only returns the top terms you requested with the `size` request attribute. The `sum_other_doc_count` is the sum of the document counts for all the buckets that are not part of the response.
    #[serde(
        rename = "sum_other_doc_count",
        skip_serializing_if = "Option::is_none"
    )]
    pub sum_other_doc_count: Option<i32>,
    /// The Lucene-formatted query string to use to get the next batch of unique term values. It is set only if you set in the request body the order to `term:asc`, and if there are more than `size` requested unique terms to return, which is signaled by a sum_other_doc_count greater than zero.
    #[serde(rename = "next_query", skip_serializing_if = "Option::is_none")]
    pub next_query: Option<String>,
    /// The buckets of field terms
    #[serde(rename = "buckets")]
    pub buckets: Vec<models::TermsAggregationResultTermsBucketsInner>,
}

impl TermsAggregationResultTerms {
    pub fn new(
        buckets: Vec<models::TermsAggregationResultTermsBucketsInner>,
    ) -> TermsAggregationResultTerms {
        TermsAggregationResultTerms {
            doc_count_error_upper_bound: None,
            sum_other_doc_count: None,
            next_query: None,
            buckets,
        }
    }
}
