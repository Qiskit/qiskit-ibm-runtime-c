/*
 * Global Search
 *
 * Search for resources with the global and shared resource properties repository that is integrated in the IBM Cloud platform. The search repository stores and searches cloud resources attributes, which categorize or classify resources. A resource is a physical or logical component that can be created or reserved for an application or service instance. They are owned by resource providers, such as IBM Kubernetes Service, or resource controller in IBM Cloud. Resources are uniquely identified by a Cloud Resource Name (CRN) or by an IMS ID. The properties of a resource include tags and system properties. Both properties are defined in an IBM Cloud billing account, and span across many regions.
 *
 * The version of the OpenAPI document: 2.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// HealthSummary : Information about of microservice health
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct HealthSummary {
    /// plan service
    #[serde(rename = "plan", skip_serializing_if = "Option::is_none")]
    pub plan: Option<String>,
    /// status service
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// status dependencies service
    #[serde(rename = "depStatus", skip_serializing_if = "Option::is_none")]
    pub dep_status: Option<String>,
    /// service input
    #[serde(rename = "serviceInput", skip_serializing_if = "Option::is_none")]
    pub service_input: Option<String>,
    /// response Time
    #[serde(rename = "responseTime", skip_serializing_if = "Option::is_none")]
    pub response_time: Option<i32>,
    /// deploy version
    #[serde(rename = "deployVersion", skip_serializing_if = "Option::is_none")]
    pub deploy_version: Option<String>,
    /// service output
    #[serde(rename = "serviceOutput", skip_serializing_if = "Option::is_none")]
    pub service_output: Option<String>,
    /// ES cluster dependencies
    #[serde(rename = "depEsClusters", skip_serializing_if = "Option::is_none")]
    pub dep_es_clusters: Option<Vec<i32>>,
    /// IAM dependency status
    #[serde(rename = "depIamXacml", skip_serializing_if = "Option::is_none")]
    pub dep_iam_xacml: Option<i32>,
    /// Istio cluster dependencies status
    #[serde(rename = "depIstioEgress", skip_serializing_if = "Option::is_none")]
    pub dep_istio_egress: Option<i32>,
}

impl HealthSummary {
    /// Information about of microservice health
    pub fn new() -> HealthSummary {
        HealthSummary {
            plan: None,
            status: None,
            dep_status: None,
            service_input: None,
            response_time: None,
            deploy_version: None,
            service_output: None,
            dep_es_clusters: None,
            dep_iam_xacml: None,
            dep_istio_egress: None,
        }
    }
}
