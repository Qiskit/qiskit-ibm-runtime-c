/*
 * IAM Identity Services
 *
 * The IAM Identity Service API allows for the management of Account Settings and Identities (Service IDs, ApiKeys).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdBasedMfaEnrollment {
    /// Defines the MFA trait for the account. Valid values:   * NONE - No MFA trait set   * NONE_NO_ROPC- No MFA, disable CLI logins with only a password   * TOTP - For all non-federated IBMId users   * TOTP4ALL - For all users   * LEVEL1 - Email-based MFA for all users   * LEVEL2 - TOTP-based MFA for all users   * LEVEL3 - U2F MFA for all users 
    #[serde(rename = "trait_account_default")]
    pub trait_account_default: TraitAccountDefault,
    /// Defines the MFA trait for the account. Valid values:   * NONE - No MFA trait set   * NONE_NO_ROPC- No MFA, disable CLI logins with only a password   * TOTP - For all non-federated IBMId users   * TOTP4ALL - For all users   * LEVEL1 - Email-based MFA for all users   * LEVEL2 - TOTP-based MFA for all users   * LEVEL3 - U2F MFA for all users 
    #[serde(rename = "trait_user_specific", skip_serializing_if = "Option::is_none")]
    pub trait_user_specific: Option<TraitUserSpecific>,
    /// Defines the MFA trait for the account. Valid values:   * NONE - No MFA trait set   * NONE_NO_ROPC- No MFA, disable CLI logins with only a password   * TOTP - For all non-federated IBMId users   * TOTP4ALL - For all users   * LEVEL1 - Email-based MFA for all users   * LEVEL2 - TOTP-based MFA for all users   * LEVEL3 - U2F MFA for all users 
    #[serde(rename = "trait_effective")]
    pub trait_effective: TraitEffective,
    /// The enrollment complies to the effective requirement.
    #[serde(rename = "complies")]
    pub complies: bool,
    /// Defines comply state for the account. Valid values:   * NO - User does not comply in the given account.   * ACCOUNT- User complies in the given account, but does not comply in at least one of the other account memberships.   * CROSS_ACCOUNT - User complies in the given account and across all other account memberships. 
    #[serde(rename = "comply_state", skip_serializing_if = "Option::is_none")]
    pub comply_state: Option<ComplyState>,
}

impl IdBasedMfaEnrollment {
    pub fn new(trait_account_default: TraitAccountDefault, trait_effective: TraitEffective, complies: bool) -> IdBasedMfaEnrollment {
        IdBasedMfaEnrollment {
            trait_account_default,
            trait_user_specific: None,
            trait_effective,
            complies,
            comply_state: None,
        }
    }
}
/// Defines the MFA trait for the account. Valid values:   * NONE - No MFA trait set   * NONE_NO_ROPC- No MFA, disable CLI logins with only a password   * TOTP - For all non-federated IBMId users   * TOTP4ALL - For all users   * LEVEL1 - Email-based MFA for all users   * LEVEL2 - TOTP-based MFA for all users   * LEVEL3 - U2F MFA for all users 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TraitAccountDefault {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "NONE_NO_ROPC")]
    NoneNoRopc,
    #[serde(rename = "TOTP")]
    Totp,
    #[serde(rename = "TOTP4ALL")]
    Totp4All,
    #[serde(rename = "LEVEL1")]
    Level1,
    #[serde(rename = "LEVEL2")]
    Level2,
    #[serde(rename = "LEVEL3")]
    Level3,
}

impl Default for TraitAccountDefault {
    fn default() -> TraitAccountDefault {
        Self::None
    }
}
/// Defines the MFA trait for the account. Valid values:   * NONE - No MFA trait set   * NONE_NO_ROPC- No MFA, disable CLI logins with only a password   * TOTP - For all non-federated IBMId users   * TOTP4ALL - For all users   * LEVEL1 - Email-based MFA for all users   * LEVEL2 - TOTP-based MFA for all users   * LEVEL3 - U2F MFA for all users 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TraitUserSpecific {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "NONE_NO_ROPC")]
    NoneNoRopc,
    #[serde(rename = "TOTP")]
    Totp,
    #[serde(rename = "TOTP4ALL")]
    Totp4All,
    #[serde(rename = "LEVEL1")]
    Level1,
    #[serde(rename = "LEVEL2")]
    Level2,
    #[serde(rename = "LEVEL3")]
    Level3,
}

impl Default for TraitUserSpecific {
    fn default() -> TraitUserSpecific {
        Self::None
    }
}
/// Defines the MFA trait for the account. Valid values:   * NONE - No MFA trait set   * NONE_NO_ROPC- No MFA, disable CLI logins with only a password   * TOTP - For all non-federated IBMId users   * TOTP4ALL - For all users   * LEVEL1 - Email-based MFA for all users   * LEVEL2 - TOTP-based MFA for all users   * LEVEL3 - U2F MFA for all users 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TraitEffective {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "NONE_NO_ROPC")]
    NoneNoRopc,
    #[serde(rename = "TOTP")]
    Totp,
    #[serde(rename = "TOTP4ALL")]
    Totp4All,
    #[serde(rename = "LEVEL1")]
    Level1,
    #[serde(rename = "LEVEL2")]
    Level2,
    #[serde(rename = "LEVEL3")]
    Level3,
}

impl Default for TraitEffective {
    fn default() -> TraitEffective {
        Self::None
    }
}
/// Defines comply state for the account. Valid values:   * NO - User does not comply in the given account.   * ACCOUNT- User complies in the given account, but does not comply in at least one of the other account memberships.   * CROSS_ACCOUNT - User complies in the given account and across all other account memberships. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ComplyState {
    #[serde(rename = "NO")]
    No,
    #[serde(rename = "ACCOUNT")]
    Account,
    #[serde(rename = "CROSS_ACCOUNT")]
    CrossAccount,
}

impl Default for ComplyState {
    fn default() -> ComplyState {
        Self::No
    }
}

