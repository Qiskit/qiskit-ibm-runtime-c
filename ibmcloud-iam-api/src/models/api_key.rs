/*
 * IAM Identity Services
 *
 * The IAM Identity Service API allows for the management of Account Settings and Identities (Service IDs, ApiKeys).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ApiKey : Response body format for API key V1 REST requests.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiKey {
    #[serde(rename = "context", skip_serializing_if = "Option::is_none")]
    pub context: Option<Box<models::ResponseContext>>,
    /// Unique identifier of this API Key.
    #[serde(rename = "id")]
    pub id: String,
    /// Version of the API Key details object. You need to specify this value when updating the API key to avoid stale updates.
    #[serde(rename = "entity_tag", skip_serializing_if = "Option::is_none")]
    pub entity_tag: Option<String>,
    /// Cloud Resource Name of the item. Example Cloud Resource Name: 'crn:v1:bluemix:public:iam-identity:us-south:a/myaccount::apikey:1234-9012-5678'
    #[serde(rename = "crn")]
    pub crn: String,
    /// The API key cannot be changed if set to true.
    #[serde(rename = "locked")]
    pub locked: bool,
    /// Defines if API key is disabled, API key cannot be used if 'disabled' is set to true.
    #[serde(rename = "disabled", skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// If set contains a date time string of the creation date in ISO format.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// IAM ID of the user or service which created the API key.
    #[serde(rename = "created_by")]
    pub created_by: String,
    /// If set contains a date time string of the last modification date in ISO format.
    #[serde(rename = "modified_at", skip_serializing_if = "Option::is_none")]
    pub modified_at: Option<String>,
    /// Name of the API key. The name is not checked for uniqueness. Therefore multiple names with the same value can exist. Access is done via the UUID of the API key.
    #[serde(rename = "name")]
    pub name: String,
    /// Defines whether you can manage CLI login sessions for the API key. When `true`, sessions are created and can be reviewed or revoked. When `false`, no sessions are tracked. To block access, delete or rotate the API key. Available only for user API keys.
    #[serde(rename = "support_sessions", skip_serializing_if = "Option::is_none")]
    pub support_sessions: Option<bool>,
    /// Defines the action to take when API key is leaked, valid values are 'none', 'disable' and 'delete'.
    #[serde(rename = "action_when_leaked", skip_serializing_if = "Option::is_none")]
    pub action_when_leaked: Option<String>,
    /// The optional description of the API key. The 'description' property is only available if a description was provided during a create of an API key.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The iam_id that this API key authenticates.
    #[serde(rename = "iam_id")]
    pub iam_id: String,
    /// ID of the account that this API key authenticates for.
    #[serde(rename = "account_id")]
    pub account_id: String,
    /// The API key value. This property only contains the API key value for the following cases: create an API key, update a service ID API key that stores the API key value as retrievable, or get a service ID API key that stores the API key value as retrievable. All other operations don't return the API key value, for example all user API key related operations, except for create, don't contain the API key value.
    #[serde(rename = "apikey")]
    pub apikey: String,
    /// History of the API key.
    #[serde(rename = "history", skip_serializing_if = "Option::is_none")]
    pub history: Option<Vec<models::EnityHistoryRecord>>,
    #[serde(rename = "activity", skip_serializing_if = "Option::is_none")]
    pub activity: Option<Box<models::Activity>>,
}

impl ApiKey {
    /// Response body format for API key V1 REST requests.
    pub fn new(id: String, crn: String, locked: bool, created_by: String, name: String, iam_id: String, account_id: String, apikey: String) -> ApiKey {
        ApiKey {
            context: None,
            id,
            entity_tag: None,
            crn,
            locked,
            disabled: None,
            created_at: None,
            created_by,
            modified_at: None,
            name,
            support_sessions: None,
            action_when_leaked: None,
            description: None,
            iam_id,
            account_id,
            apikey,
            history: None,
            activity: None,
        }
    }
}

