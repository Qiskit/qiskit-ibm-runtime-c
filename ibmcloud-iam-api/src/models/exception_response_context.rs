/*
 * IAM Identity Services
 *
 * The IAM Identity Service API allows for the management of Account Settings and Identities (Service IDs, ApiKeys).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ExceptionResponseContext : Context fill with key properties for problem determination.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExceptionResponseContext {
    /// The request ID of the inbound REST request.
    #[serde(rename = "requestId", skip_serializing_if = "Option::is_none")]
    pub request_id: Option<String>,
    /// The request type of the inbound REST request.
    #[serde(rename = "requestType", skip_serializing_if = "Option::is_none")]
    pub request_type: Option<String>,
    /// The user agent of the inbound REST request.
    #[serde(rename = "userAgent", skip_serializing_if = "Option::is_none")]
    pub user_agent: Option<String>,
    /// The URL of that cluster.
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// The instance ID of the server instance processing the request.
    #[serde(rename = "instanceId", skip_serializing_if = "Option::is_none")]
    pub instance_id: Option<String>,
    /// The thread ID of the server instance processing the request.
    #[serde(rename = "threadId", skip_serializing_if = "Option::is_none")]
    pub thread_id: Option<String>,
    /// The host of the server instance processing the request.
    #[serde(rename = "host", skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// The start time of the request.
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    /// The finish time of the request.
    #[serde(rename = "endTime", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    /// The elapsed time in msec.
    #[serde(rename = "elapsedTime", skip_serializing_if = "Option::is_none")]
    pub elapsed_time: Option<String>,
    /// The language used to present the error message.
    #[serde(rename = "locale", skip_serializing_if = "Option::is_none")]
    pub locale: Option<String>,
    /// The cluster name.
    #[serde(rename = "clusterName", skip_serializing_if = "Option::is_none")]
    pub cluster_name: Option<String>,
}

impl ExceptionResponseContext {
    /// Context fill with key properties for problem determination.
    pub fn new() -> ExceptionResponseContext {
        ExceptionResponseContext {
            request_id: None,
            request_type: None,
            user_agent: None,
            url: None,
            instance_id: None,
            thread_id: None,
            host: None,
            start_time: None,
            end_time: None,
            elapsed_time: None,
            locale: None,
            cluster_name: None,
        }
    }
}
