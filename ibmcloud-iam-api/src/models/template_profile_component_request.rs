/*
 * IAM Identity Services
 *
 * The IAM Identity Service API allows for the management of Account Settings and Identities (Service IDs, ApiKeys).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TemplateProfileComponentRequest : Input body parameters for the TemplateProfileComponent
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TemplateProfileComponentRequest {
    /// Name of the Profile
    #[serde(rename = "name")]
    pub name: String,
    /// Description of the Profile
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Email of the trusted profile
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    /// Rules for the Profile
    #[serde(rename = "rules", skip_serializing_if = "Option::is_none")]
    pub rules: Option<Vec<models::TrustedProfileTemplateClaimRule>>,
    /// Identities for the Profile
    #[serde(rename = "identities", skip_serializing_if = "Option::is_none")]
    pub identities: Option<Vec<models::ProfileIdentityRequest>>,
}

impl TemplateProfileComponentRequest {
    /// Input body parameters for the TemplateProfileComponent
    pub fn new(name: String) -> TemplateProfileComponentRequest {
        TemplateProfileComponentRequest {
            name,
            description: None,
            email: None,
            rules: None,
            identities: None,
        }
    }
}

