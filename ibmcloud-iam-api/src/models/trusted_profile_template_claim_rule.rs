/*
 * IAM Identity Services
 *
 * The IAM Identity Service API allows for the management of Account Settings and Identities (Service IDs, ApiKeys).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TrustedProfileTemplateClaimRule {
    /// Name of the claim rule to be created or updated
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Type of the claim rule
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The realm name of the Idp this claim rule applies to. This field is required only if the type is specified as 'Profile-SAML'.
    #[serde(rename = "realm_name", skip_serializing_if = "Option::is_none")]
    pub realm_name: Option<String>,
    /// Session expiration in seconds, only required if type is 'Profile-SAML'.
    #[serde(rename = "expiration", skip_serializing_if = "Option::is_none")]
    pub expiration: Option<i32>,
    /// Conditions of this claim rule.
    #[serde(rename = "conditions")]
    pub conditions: Vec<models::ProfileClaimRuleConditions>,
}

impl TrustedProfileTemplateClaimRule {
    pub fn new(r#type: Type, conditions: Vec<models::ProfileClaimRuleConditions>) -> TrustedProfileTemplateClaimRule {
        TrustedProfileTemplateClaimRule {
            name: None,
            r#type,
            realm_name: None,
            expiration: None,
            conditions,
        }
    }
}
/// Type of the claim rule
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "Profile-SAML")]
    ProfileSaml,
}

impl Default for Type {
    fn default() -> Type {
        Self::ProfileSaml
    }
}

