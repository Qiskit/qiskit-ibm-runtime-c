/*
 * IAM Identity Services
 *
 * The IAM Identity Service API allows for the management of Account Settings and Identities (Service IDs, ApiKeys).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ProfileLink : Link details
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProfileLink {
    /// the unique identifier of the link
    #[serde(rename = "id")]
    pub id: String,
    /// version of the link
    #[serde(rename = "entity_tag")]
    pub entity_tag: String,
    /// If set contains a date time string of the creation date in ISO format.
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// If set contains a date time string of the last modification date in ISO format.
    #[serde(rename = "modified_at")]
    pub modified_at: String,
    /// Optional name of the Link
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The compute resource type. Valid values are VSI, IKS_SA, ROKS_SA
    #[serde(rename = "cr_type")]
    pub cr_type: String,
    #[serde(rename = "link")]
    pub link: Box<models::ProfileLinkLink>,
}

impl ProfileLink {
    /// Link details
    pub fn new(id: String, entity_tag: String, created_at: String, modified_at: String, cr_type: String, link: models::ProfileLinkLink) -> ProfileLink {
        ProfileLink {
            id,
            entity_tag,
            created_at,
            modified_at,
            name: None,
            cr_type,
            link: Box::new(link),
        }
    }
}

