/*
 * IAM Identity Services
 *
 * The IAM Identity Service API allows for the management of Account Settings and Identities (Service IDs, ApiKeys).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdentityPreferenceResponse {
    /// Service of the preference
    #[serde(rename = "service", skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
    /// Unique ID of the preference
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Account ID of the preference, only present for scope 'account'
    #[serde(rename = "account_id", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<String>,
    /// Scope of the preference, 'global' or 'account'
    #[serde(rename = "scope", skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// String value of the preference, only one value property is set, either 'value_string' or 'value_list_of_strings' is present.
    #[serde(rename = "value_string", skip_serializing_if = "Option::is_none")]
    pub value_string: Option<String>,
    /// List of value of the preference, only one value property is set, either 'value_string' or 'value_list_of_strings' is present.
    #[serde(
        rename = "value_list_of_strings",
        skip_serializing_if = "Option::is_none"
    )]
    pub value_list_of_strings: Option<Vec<String>>,
}

impl IdentityPreferenceResponse {
    pub fn new() -> IdentityPreferenceResponse {
        IdentityPreferenceResponse {
            service: None,
            id: None,
            account_id: None,
            scope: None,
            value_string: None,
            value_list_of_strings: None,
        }
    }
}
