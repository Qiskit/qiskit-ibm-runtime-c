/*
 * IAM Identity Services
 *
 * The IAM Identity Service API allows for the management of Account Settings and Identities (Service IDs, ApiKeys).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AccountSettingsRequest : Input body parameters for the Account Settings REST request.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccountSettingsRequest {
    /// Defines whether or not creating a service ID is access controlled. Valid values:   * RESTRICTED - only users assigned the 'Service ID creator' role on the IAM Identity Service can create service IDs, including the account owner   * NOT_RESTRICTED - all members of an account can create service IDs   * NOT_SET - to 'unset' a previous set value
    #[serde(rename = "restrict_create_service_id", skip_serializing_if = "Option::is_none")]
    pub restrict_create_service_id: Option<RestrictCreateServiceId>,
    /// Defines whether or not creating platform API keys is access controlled. Valid values:   * RESTRICTED - only users assigned the 'User API key creator' role on the IAM Identity Service can create API keys, including the account owner   * NOT_RESTRICTED - all members of an account can create platform API keys   * NOT_SET - to 'unset' a previous set value 
    #[serde(rename = "restrict_create_platform_apikey", skip_serializing_if = "Option::is_none")]
    pub restrict_create_platform_apikey: Option<RestrictCreatePlatformApikey>,
    /// Defines the IP addresses and subnets from which IAM tokens can be created for the account.
    #[serde(rename = "allowed_ip_addresses", skip_serializing_if = "Option::is_none")]
    pub allowed_ip_addresses: Option<String>,
    /// Defines the MFA trait for the account. Valid values:   * NONE - No MFA trait set   * NONE_NO_ROPC- No MFA, disable CLI logins with only a password   * TOTP - For all non-federated IBMId users   * TOTP4ALL - For all users   * LEVEL1 - Email-based MFA for all users   * LEVEL2 - TOTP-based MFA for all users   * LEVEL3 - U2F MFA for all users 
    #[serde(rename = "mfa", skip_serializing_if = "Option::is_none")]
    pub mfa: Option<Mfa>,
    /// List of users that are exempted from the MFA requirement of the account.
    #[serde(rename = "user_mfa", skip_serializing_if = "Option::is_none")]
    pub user_mfa: Option<Vec<models::AccountSettingsUserMfa>>,
    /// Defines the session expiration in seconds for the account. Valid values:   * Any whole number between between '900' and '86400'   * NOT_SET - To unset account setting and use service default
    #[serde(rename = "session_expiration_in_seconds", skip_serializing_if = "Option::is_none")]
    pub session_expiration_in_seconds: Option<String>,
    /// Defines the period of time in seconds in which a session will be invalidated due to inactivity. Valid values:   * Any whole number between '900' and '7200'   * NOT_SET - To unset account setting and use service default
    #[serde(rename = "session_invalidation_in_seconds", skip_serializing_if = "Option::is_none")]
    pub session_invalidation_in_seconds: Option<String>,
    /// Defines the max allowed sessions per identity required by the account. Value values:   * Any whole number greater than 0   * NOT_SET - To unset account setting and use service default
    #[serde(rename = "max_sessions_per_identity", skip_serializing_if = "Option::is_none")]
    pub max_sessions_per_identity: Option<String>,
    /// Defines the access token expiration in seconds. Valid values:   * Any whole number between '900' and '3600'   * NOT_SET - To unset account setting and use service default
    #[serde(rename = "system_access_token_expiration_in_seconds", skip_serializing_if = "Option::is_none")]
    pub system_access_token_expiration_in_seconds: Option<String>,
    /// Defines the refresh token expiration in seconds. Valid values:   * Any whole number between '900' and '259200'   * NOT_SET - To unset account setting and use service default
    #[serde(rename = "system_refresh_token_expiration_in_seconds", skip_serializing_if = "Option::is_none")]
    pub system_refresh_token_expiration_in_seconds: Option<String>,
}

impl AccountSettingsRequest {
    /// Input body parameters for the Account Settings REST request.
    pub fn new() -> AccountSettingsRequest {
        AccountSettingsRequest {
            restrict_create_service_id: None,
            restrict_create_platform_apikey: None,
            allowed_ip_addresses: None,
            mfa: None,
            user_mfa: None,
            session_expiration_in_seconds: None,
            session_invalidation_in_seconds: None,
            max_sessions_per_identity: None,
            system_access_token_expiration_in_seconds: None,
            system_refresh_token_expiration_in_seconds: None,
        }
    }
}
/// Defines whether or not creating a service ID is access controlled. Valid values:   * RESTRICTED - only users assigned the 'Service ID creator' role on the IAM Identity Service can create service IDs, including the account owner   * NOT_RESTRICTED - all members of an account can create service IDs   * NOT_SET - to 'unset' a previous set value
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RestrictCreateServiceId {
    #[serde(rename = "RESTRICTED")]
    Restricted,
    #[serde(rename = "NOT_RESTRICTED")]
    NotRestricted,
    #[serde(rename = "NOT_SET")]
    NotSet,
}

impl Default for RestrictCreateServiceId {
    fn default() -> RestrictCreateServiceId {
        Self::Restricted
    }
}
/// Defines whether or not creating platform API keys is access controlled. Valid values:   * RESTRICTED - only users assigned the 'User API key creator' role on the IAM Identity Service can create API keys, including the account owner   * NOT_RESTRICTED - all members of an account can create platform API keys   * NOT_SET - to 'unset' a previous set value 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RestrictCreatePlatformApikey {
    #[serde(rename = "RESTRICTED")]
    Restricted,
    #[serde(rename = "NOT_RESTRICTED")]
    NotRestricted,
    #[serde(rename = "NOT_SET")]
    NotSet,
}

impl Default for RestrictCreatePlatformApikey {
    fn default() -> RestrictCreatePlatformApikey {
        Self::Restricted
    }
}
/// Defines the MFA trait for the account. Valid values:   * NONE - No MFA trait set   * NONE_NO_ROPC- No MFA, disable CLI logins with only a password   * TOTP - For all non-federated IBMId users   * TOTP4ALL - For all users   * LEVEL1 - Email-based MFA for all users   * LEVEL2 - TOTP-based MFA for all users   * LEVEL3 - U2F MFA for all users 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Mfa {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "NONE_NO_ROPC")]
    NoneNoRopc,
    #[serde(rename = "TOTP")]
    Totp,
    #[serde(rename = "TOTP4ALL")]
    Totp4All,
    #[serde(rename = "LEVEL1")]
    Level1,
    #[serde(rename = "LEVEL2")]
    Level2,
    #[serde(rename = "LEVEL3")]
    Level3,
}

impl Default for Mfa {
    fn default() -> Mfa {
        Self::None
    }
}

