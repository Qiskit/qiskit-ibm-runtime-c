/*
 * IAM Identity Services
 *
 * The IAM Identity Service API allows for the management of Account Settings and Identities (Service IDs, ApiKeys).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ApikeyActivity : Apikeys activity details
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApikeyActivity {
    /// Unique id of the apikey.
    #[serde(rename = "id")]
    pub id: String,
    /// Name provided during creation of the apikey.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Type of the apikey. Supported values are `serviceid` and `user`.
    #[serde(rename = "type")]
    pub r#type: String,
    #[serde(rename = "serviceid", skip_serializing_if = "Option::is_none")]
    pub serviceid: Option<Box<models::ApikeyActivityServiceid>>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<Box<models::ApikeyActivityUser>>,
    /// Time when the apikey was last authenticated.
    #[serde(rename = "last_authn", skip_serializing_if = "Option::is_none")]
    pub last_authn: Option<String>,
}

impl ApikeyActivity {
    /// Apikeys activity details
    pub fn new(id: String, r#type: String) -> ApikeyActivity {
        ApikeyActivity {
            id,
            name: None,
            r#type,
            serviceid: None,
            user: None,
            last_authn: None,
        }
    }
}
