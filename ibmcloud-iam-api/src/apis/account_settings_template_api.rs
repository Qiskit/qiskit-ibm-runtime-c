/*
 * IAM Identity Services
 *
 * The IAM Identity Service API allows for the management of Account Settings and Identities (Service IDs, ApiKeys).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`commit_account_settings_template`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CommitAccountSettingsTemplateError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_account_settings_template`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateAccountSettingsTemplateError {
    Status400(),
    Status401(),
    Status403(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_account_settings_template_version`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateAccountSettingsTemplateVersionError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_account_settings_template_version`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteAccountSettingsTemplateVersionError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_all_versions_of_account_settings_template`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteAllVersionsOfAccountSettingsTemplateError {
    Status400(),
    Status401(),
    Status403(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_account_settings_template_version`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAccountSettingsTemplateVersionError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_latest_account_settings_template_version`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLatestAccountSettingsTemplateVersionError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_account_settings_templates`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListAccountSettingsTemplatesError {
    Status400(),
    Status401(),
    Status403(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_versions_of_account_settings_template`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListVersionsOfAccountSettingsTemplateError {
    Status400(),
    Status401(),
    Status403(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_account_settings_template_version`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateAccountSettingsTemplateVersionError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// Commit a specific version of an account settings template in an Enterprise Account. A Template must be committed before being assigned, and once committed, can no longer be modified.
pub async fn commit_account_settings_template(
    configuration: &configuration::Configuration,
    template_id: &str,
    version: &str,
    authorization: &str,
) -> Result<(), Error<CommitAccountSettingsTemplateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_template_id = template_id;
    let p_version = version;
    let p_authorization = authorization;

    let uri_str = format!(
        "{}/v1/account_settings_templates/{template_id}/versions/{version}/commit",
        configuration.base_path,
        template_id = crate::apis::urlencode(p_template_id),
        version = crate::apis::urlencode(p_version)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<CommitAccountSettingsTemplateError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Create a new account settings template in an enterprise account.
pub async fn create_account_settings_template(
    configuration: &configuration::Configuration,
    authorization: &str,
    account_settings_template_request: models::AccountSettingsTemplateRequest,
) -> Result<models::AccountSettingsTemplateResponse, Error<CreateAccountSettingsTemplateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_account_settings_template_request = account_settings_template_request;

    let uri_str = format!("{}/v1/account_settings_templates", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    req_builder = req_builder.json(&p_account_settings_template_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AccountSettingsTemplateResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AccountSettingsTemplateResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateAccountSettingsTemplateError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Create a new version of an account settings template in an Enterprise Account
pub async fn create_account_settings_template_version(
    configuration: &configuration::Configuration,
    template_id: &str,
    authorization: &str,
    account_settings_template_request: models::AccountSettingsTemplateRequest,
) -> Result<models::AccountSettingsTemplateResponse, Error<CreateAccountSettingsTemplateVersionError>>
{
    // add a prefix to parameters to efficiently prevent name collisions
    let p_template_id = template_id;
    let p_authorization = authorization;
    let p_account_settings_template_request = account_settings_template_request;

    let uri_str = format!(
        "{}/v1/account_settings_templates/{template_id}/versions",
        configuration.base_path,
        template_id = crate::apis::urlencode(p_template_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    req_builder = req_builder.json(&p_account_settings_template_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AccountSettingsTemplateResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AccountSettingsTemplateResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateAccountSettingsTemplateVersionError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Delete a specific version of an account settings template in an Enterprise Account
pub async fn delete_account_settings_template_version(
    configuration: &configuration::Configuration,
    template_id: &str,
    version: &str,
    authorization: &str,
) -> Result<(), Error<DeleteAccountSettingsTemplateVersionError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_template_id = template_id;
    let p_version = version;
    let p_authorization = authorization;

    let uri_str = format!(
        "{}/v1/account_settings_templates/{template_id}/versions/{version}",
        configuration.base_path,
        template_id = crate::apis::urlencode(p_template_id),
        version = crate::apis::urlencode(p_version)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteAccountSettingsTemplateVersionError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Delete all versions of an account settings template in an enterprise account. If any version is assigned to child accounts, you must first delete the assignment.
pub async fn delete_all_versions_of_account_settings_template(
    configuration: &configuration::Configuration,
    template_id: &str,
    authorization: &str,
) -> Result<(), Error<DeleteAllVersionsOfAccountSettingsTemplateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_template_id = template_id;
    let p_authorization = authorization;

    let uri_str = format!(
        "{}/v1/account_settings_templates/{template_id}",
        configuration.base_path,
        template_id = crate::apis::urlencode(p_template_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteAllVersionsOfAccountSettingsTemplateError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Get a specific version of an account settings template in an Enterprise Account
pub async fn get_account_settings_template_version(
    configuration: &configuration::Configuration,
    template_id: &str,
    version: &str,
    authorization: &str,
    include_history: Option<bool>,
) -> Result<models::AccountSettingsTemplateResponse, Error<GetAccountSettingsTemplateVersionError>>
{
    // add a prefix to parameters to efficiently prevent name collisions
    let p_template_id = template_id;
    let p_version = version;
    let p_authorization = authorization;
    let p_include_history = include_history;

    let uri_str = format!(
        "{}/v1/account_settings_templates/{template_id}/versions/{version}",
        configuration.base_path,
        template_id = crate::apis::urlencode(p_template_id),
        version = crate::apis::urlencode(p_version)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_include_history {
        req_builder = req_builder.query(&[("include_history", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AccountSettingsTemplateResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AccountSettingsTemplateResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAccountSettingsTemplateVersionError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Get the latest version of a specific account settings template in an enterprise account.
pub async fn get_latest_account_settings_template_version(
    configuration: &configuration::Configuration,
    template_id: &str,
    authorization: &str,
    include_history: Option<bool>,
) -> Result<
    models::AccountSettingsTemplateResponse,
    Error<GetLatestAccountSettingsTemplateVersionError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_template_id = template_id;
    let p_authorization = authorization;
    let p_include_history = include_history;

    let uri_str = format!(
        "{}/v1/account_settings_templates/{template_id}",
        configuration.base_path,
        template_id = crate::apis::urlencode(p_template_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_include_history {
        req_builder = req_builder.query(&[("include_history", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AccountSettingsTemplateResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AccountSettingsTemplateResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetLatestAccountSettingsTemplateVersionError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// List account settings templates in an enterprise account
pub async fn list_account_settings_templates(
    configuration: &configuration::Configuration,
    authorization: &str,
    account_id: Option<&str>,
    limit: Option<&str>,
    pagetoken: Option<&str>,
    sort: Option<&str>,
    order: Option<&str>,
    include_history: Option<&str>,
) -> Result<models::AccountSettingsTemplateList, Error<ListAccountSettingsTemplatesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_account_id = account_id;
    let p_limit = limit;
    let p_pagetoken = pagetoken;
    let p_sort = sort;
    let p_order = order;
    let p_include_history = include_history;

    let uri_str = format!("{}/v1/account_settings_templates", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_account_id {
        req_builder = req_builder.query(&[("account_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_pagetoken {
        req_builder = req_builder.query(&[("pagetoken", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort {
        req_builder = req_builder.query(&[("sort", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_order {
        req_builder = req_builder.query(&[("order", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_history {
        req_builder = req_builder.query(&[("include_history", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AccountSettingsTemplateList`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AccountSettingsTemplateList`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListAccountSettingsTemplatesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// List the versions of a specific account settings template in an enterprise account.
pub async fn list_versions_of_account_settings_template(
    configuration: &configuration::Configuration,
    template_id: &str,
    authorization: &str,
    limit: Option<&str>,
    pagetoken: Option<&str>,
    sort: Option<&str>,
    order: Option<&str>,
    include_history: Option<&str>,
) -> Result<models::AccountSettingsTemplateList, Error<ListVersionsOfAccountSettingsTemplateError>>
{
    // add a prefix to parameters to efficiently prevent name collisions
    let p_template_id = template_id;
    let p_authorization = authorization;
    let p_limit = limit;
    let p_pagetoken = pagetoken;
    let p_sort = sort;
    let p_order = order;
    let p_include_history = include_history;

    let uri_str = format!(
        "{}/v1/account_settings_templates/{template_id}/versions",
        configuration.base_path,
        template_id = crate::apis::urlencode(p_template_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_pagetoken {
        req_builder = req_builder.query(&[("pagetoken", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort {
        req_builder = req_builder.query(&[("sort", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_order {
        req_builder = req_builder.query(&[("order", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_history {
        req_builder = req_builder.query(&[("include_history", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AccountSettingsTemplateList`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AccountSettingsTemplateList`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListVersionsOfAccountSettingsTemplateError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Update a specific version of an account settings template in an Enterprise Account
pub async fn update_account_settings_template_version(
    configuration: &configuration::Configuration,
    if_match: &str,
    template_id: &str,
    version: &str,
    authorization: &str,
    account_settings_template_request: models::AccountSettingsTemplateRequest,
) -> Result<models::AccountSettingsTemplateResponse, Error<UpdateAccountSettingsTemplateVersionError>>
{
    // add a prefix to parameters to efficiently prevent name collisions
    let p_if_match = if_match;
    let p_template_id = template_id;
    let p_version = version;
    let p_authorization = authorization;
    let p_account_settings_template_request = account_settings_template_request;

    let uri_str = format!(
        "{}/v1/account_settings_templates/{template_id}/versions/{version}",
        configuration.base_path,
        template_id = crate::apis::urlencode(p_template_id),
        version = crate::apis::urlencode(p_version)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("If-Match", p_if_match.to_string());
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    req_builder = req_builder.json(&p_account_settings_template_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AccountSettingsTemplateResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AccountSettingsTemplateResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateAccountSettingsTemplateVersionError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
