/*
 * IAM Identity Services
 *
 * The IAM Identity Service API allows for the management of Account Settings and Identities (Service IDs, ApiKeys).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`get_effective_account_settings`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetEffectiveAccountSettingsError {
    Status400(),
    Status401(),
    Status403(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// Returns effective account settings for given account ID
pub async fn get_effective_account_settings(
    configuration: &configuration::Configuration,
    account_id: &str,
    authorization: &str,
    include_history: Option<bool>,
    resolve_user_mfa: Option<bool>,
) -> Result<models::EffectiveAccountSettingsResponse, Error<GetEffectiveAccountSettingsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_account_id = account_id;
    let p_authorization = authorization;
    let p_include_history = include_history;
    let p_resolve_user_mfa = resolve_user_mfa;

    let uri_str = format!(
        "{}/v1/accounts/{account_id}/effective_settings/identity",
        configuration.base_path,
        account_id = crate::apis::urlencode(p_account_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_include_history {
        req_builder = req_builder.query(&[("include_history", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_resolve_user_mfa {
        req_builder = req_builder.query(&[("resolve_user_mfa", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::EffectiveAccountSettingsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::EffectiveAccountSettingsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetEffectiveAccountSettingsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
