/*
 * IAM Identity Services
 *
 * The IAM Identity Service API allows for the management of Account Settings and Identities (Service IDs, ApiKeys).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`commit_profile_template`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CommitProfileTemplateError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_profile_template`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateProfileTemplateError {
    Status400(),
    Status401(),
    Status403(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_profile_template_version`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateProfileTemplateVersionError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_all_versions_of_profile_template`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteAllVersionsOfProfileTemplateError {
    Status400(),
    Status401(),
    Status403(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_profile_template_version`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteProfileTemplateVersionError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_latest_profile_template_version`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLatestProfileTemplateVersionError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_profile_template_version`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetProfileTemplateVersionError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_profile_templates`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListProfileTemplatesError {
    Status400(),
    Status401(),
    Status403(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_versions_of_profile_template`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListVersionsOfProfileTemplateError {
    Status400(),
    Status401(),
    Status403(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_profile_template_version`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateProfileTemplateVersionError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// Commit a specific version of a trusted profile template in an enterprise account. You must commit a template before you can assign it to child accounts. Once a template is committed, you can no longer modify the template.
pub async fn commit_profile_template(
    configuration: &configuration::Configuration,
    template_id: &str,
    version: &str,
    authorization: &str,
) -> Result<(), Error<CommitProfileTemplateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_template_id = template_id;
    let p_version = version;
    let p_authorization = authorization;

    let uri_str = format!(
        "{}/v1/profile_templates/{template_id}/versions/{version}/commit",
        configuration.base_path,
        template_id = crate::apis::urlencode(p_template_id),
        version = crate::apis::urlencode(p_version)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<CommitProfileTemplateError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Create a new trusted profile template in an enterprise account.
pub async fn create_profile_template(
    configuration: &configuration::Configuration,
    authorization: &str,
    trusted_profile_template_request: models::TrustedProfileTemplateRequest,
) -> Result<models::TrustedProfileTemplateResponse, Error<CreateProfileTemplateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_trusted_profile_template_request = trusted_profile_template_request;

    let uri_str = format!("{}/v1/profile_templates", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    req_builder = req_builder.json(&p_trusted_profile_template_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TrustedProfileTemplateResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TrustedProfileTemplateResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateProfileTemplateError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Create a new version of a trusted profile template in an enterprise account.
pub async fn create_profile_template_version(
    configuration: &configuration::Configuration,
    template_id: &str,
    authorization: &str,
    trusted_profile_template_request: models::TrustedProfileTemplateRequest,
) -> Result<models::TrustedProfileTemplateResponse, Error<CreateProfileTemplateVersionError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_template_id = template_id;
    let p_authorization = authorization;
    let p_trusted_profile_template_request = trusted_profile_template_request;

    let uri_str = format!(
        "{}/v1/profile_templates/{template_id}/versions",
        configuration.base_path,
        template_id = crate::apis::urlencode(p_template_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    req_builder = req_builder.json(&p_trusted_profile_template_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TrustedProfileTemplateResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TrustedProfileTemplateResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateProfileTemplateVersionError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Delete all versions of a trusted profile template in an enterprise account. If any version is assigned to child accounts, you must first delete the assignment.
pub async fn delete_all_versions_of_profile_template(
    configuration: &configuration::Configuration,
    template_id: &str,
    authorization: &str,
) -> Result<(), Error<DeleteAllVersionsOfProfileTemplateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_template_id = template_id;
    let p_authorization = authorization;

    let uri_str = format!(
        "{}/v1/profile_templates/{template_id}",
        configuration.base_path,
        template_id = crate::apis::urlencode(p_template_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteAllVersionsOfProfileTemplateError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Delete a specific version of a trusted profile template in an enterprise account. If the version is assigned to child accounts, you must first delete the assignment.
pub async fn delete_profile_template_version(
    configuration: &configuration::Configuration,
    template_id: &str,
    version: &str,
    authorization: &str,
) -> Result<(), Error<DeleteProfileTemplateVersionError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_template_id = template_id;
    let p_version = version;
    let p_authorization = authorization;

    let uri_str = format!(
        "{}/v1/profile_templates/{template_id}/versions/{version}",
        configuration.base_path,
        template_id = crate::apis::urlencode(p_template_id),
        version = crate::apis::urlencode(p_version)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteProfileTemplateVersionError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Get the latest version of a trusted profile template in an enterprise account.
pub async fn get_latest_profile_template_version(
    configuration: &configuration::Configuration,
    template_id: &str,
    authorization: &str,
    include_history: Option<bool>,
) -> Result<models::TrustedProfileTemplateResponse, Error<GetLatestProfileTemplateVersionError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_template_id = template_id;
    let p_authorization = authorization;
    let p_include_history = include_history;

    let uri_str = format!(
        "{}/v1/profile_templates/{template_id}",
        configuration.base_path,
        template_id = crate::apis::urlencode(p_template_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_include_history {
        req_builder = req_builder.query(&[("include_history", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TrustedProfileTemplateResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TrustedProfileTemplateResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetLatestProfileTemplateVersionError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Get a specific version of a trusted profile template in an enterprise account.
pub async fn get_profile_template_version(
    configuration: &configuration::Configuration,
    template_id: &str,
    version: &str,
    authorization: &str,
    include_history: Option<bool>,
) -> Result<models::TrustedProfileTemplateResponse, Error<GetProfileTemplateVersionError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_template_id = template_id;
    let p_version = version;
    let p_authorization = authorization;
    let p_include_history = include_history;

    let uri_str = format!(
        "{}/v1/profile_templates/{template_id}/versions/{version}",
        configuration.base_path,
        template_id = crate::apis::urlencode(p_template_id),
        version = crate::apis::urlencode(p_version)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_include_history {
        req_builder = req_builder.query(&[("include_history", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TrustedProfileTemplateResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TrustedProfileTemplateResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetProfileTemplateVersionError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// List the trusted profile templates in an enterprise account.
pub async fn list_profile_templates(
    configuration: &configuration::Configuration,
    authorization: &str,
    account_id: Option<&str>,
    limit: Option<&str>,
    pagetoken: Option<&str>,
    sort: Option<&str>,
    order: Option<&str>,
    include_history: Option<&str>,
) -> Result<models::TrustedProfileTemplateList, Error<ListProfileTemplatesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_account_id = account_id;
    let p_limit = limit;
    let p_pagetoken = pagetoken;
    let p_sort = sort;
    let p_order = order;
    let p_include_history = include_history;

    let uri_str = format!("{}/v1/profile_templates", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_account_id {
        req_builder = req_builder.query(&[("account_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_pagetoken {
        req_builder = req_builder.query(&[("pagetoken", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort {
        req_builder = req_builder.query(&[("sort", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_order {
        req_builder = req_builder.query(&[("order", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_history {
        req_builder = req_builder.query(&[("include_history", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TrustedProfileTemplateList`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TrustedProfileTemplateList`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListProfileTemplatesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// List the versions of a trusted profile template in an enterprise account.
pub async fn list_versions_of_profile_template(
    configuration: &configuration::Configuration,
    template_id: &str,
    authorization: &str,
    limit: Option<&str>,
    pagetoken: Option<&str>,
    sort: Option<&str>,
    order: Option<&str>,
    include_history: Option<&str>,
) -> Result<models::TrustedProfileTemplateList, Error<ListVersionsOfProfileTemplateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_template_id = template_id;
    let p_authorization = authorization;
    let p_limit = limit;
    let p_pagetoken = pagetoken;
    let p_sort = sort;
    let p_order = order;
    let p_include_history = include_history;

    let uri_str = format!(
        "{}/v1/profile_templates/{template_id}/versions",
        configuration.base_path,
        template_id = crate::apis::urlencode(p_template_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_pagetoken {
        req_builder = req_builder.query(&[("pagetoken", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort {
        req_builder = req_builder.query(&[("sort", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_order {
        req_builder = req_builder.query(&[("order", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_history {
        req_builder = req_builder.query(&[("include_history", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TrustedProfileTemplateList`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TrustedProfileTemplateList`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListVersionsOfProfileTemplateError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Update a specific version of a trusted profile template in an enterprise account.
pub async fn update_profile_template_version(
    configuration: &configuration::Configuration,
    if_match: &str,
    template_id: &str,
    version: &str,
    authorization: &str,
    trusted_profile_template_request: models::TrustedProfileTemplateRequest,
) -> Result<models::TrustedProfileTemplateResponse, Error<UpdateProfileTemplateVersionError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_if_match = if_match;
    let p_template_id = template_id;
    let p_version = version;
    let p_authorization = authorization;
    let p_trusted_profile_template_request = trusted_profile_template_request;

    let uri_str = format!(
        "{}/v1/profile_templates/{template_id}/versions/{version}",
        configuration.base_path,
        template_id = crate::apis::urlencode(p_template_id),
        version = crate::apis::urlencode(p_version)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("If-Match", p_if_match.to_string());
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    req_builder = req_builder.json(&p_trusted_profile_template_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TrustedProfileTemplateResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TrustedProfileTemplateResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateProfileTemplateVersionError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
