/*
 * IAM Identity Services
 *
 * The IAM Identity Service API allows for the management of Account Settings and Identities (Service IDs, ApiKeys).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`create_account_settings_assignment`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateAccountSettingsAssignmentError {
    Status400(models::ExceptionResponse),
    Status401(models::ExceptionResponse),
    Status403(models::ExceptionResponse),
    Status404(models::ExceptionResponse),
    Status500(models::ExceptionResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_account_settings_assignment`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteAccountSettingsAssignmentError {
    Status400(models::ExceptionResponse),
    Status401(models::ExceptionResponse),
    Status403(models::ExceptionResponse),
    Status404(models::ExceptionResponse),
    Status500(models::ExceptionResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_account_settings_assignment`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAccountSettingsAssignmentError {
    Status400(models::ExceptionResponse),
    Status401(models::ExceptionResponse),
    Status403(models::ExceptionResponse),
    Status404(models::ExceptionResponse),
    Status500(models::ExceptionResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_account_settings_assignments`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListAccountSettingsAssignmentsError {
    Status400(models::ExceptionResponse),
    Status401(models::ExceptionResponse),
    Status403(models::ExceptionResponse),
    Status500(models::ExceptionResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_account_settings_assignment`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateAccountSettingsAssignmentError {
    Status400(models::ExceptionResponse),
    Status401(models::ExceptionResponse),
    Status403(models::ExceptionResponse),
    Status500(models::ExceptionResponse),
    UnknownValue(serde_json::Value),
}

/// Create an assigment for an account settings template.
pub async fn create_account_settings_assignment(
    configuration: &configuration::Configuration,
    create_template_assignment_request: models::CreateTemplateAssignmentRequest,
    authorization: Option<&str>,
) -> Result<models::TemplateAssignmentResponse, Error<CreateAccountSettingsAssignmentError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_create_template_assignment_request = create_template_assignment_request;
    let p_authorization = authorization;

    let uri_str = format!(
        "{}/v1/account_settings_assignments/",
        configuration.base_path
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_authorization {
        req_builder = req_builder.header("Authorization", param_value.to_string());
    }
    req_builder = req_builder.json(&p_create_template_assignment_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TemplateAssignmentResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TemplateAssignmentResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateAccountSettingsAssignmentError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Delete an account settings template assignment. This removes any IAM resources created by this assignment in child accounts.
pub async fn delete_account_settings_assignment(
    configuration: &configuration::Configuration,
    assignment_id: &str,
    authorization: Option<&str>,
) -> Result<models::ExceptionResponse, Error<DeleteAccountSettingsAssignmentError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_assignment_id = assignment_id;
    let p_authorization = authorization;

    let uri_str = format!(
        "{}/v1/account_settings_assignments/{assignment_id}",
        configuration.base_path,
        assignment_id = crate::apis::urlencode(p_assignment_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_authorization {
        req_builder = req_builder.header("Authorization", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ExceptionResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ExceptionResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteAccountSettingsAssignmentError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Get an assigment for an account settings template.
pub async fn get_account_settings_assignment(
    configuration: &configuration::Configuration,
    assignment_id: &str,
    include_history: Option<bool>,
    authorization: Option<&str>,
) -> Result<models::TemplateAssignmentResponse, Error<GetAccountSettingsAssignmentError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_assignment_id = assignment_id;
    let p_include_history = include_history;
    let p_authorization = authorization;

    let uri_str = format!(
        "{}/v1/account_settings_assignments/{assignment_id}",
        configuration.base_path,
        assignment_id = crate::apis::urlencode(p_assignment_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_include_history {
        req_builder = req_builder.query(&[("include_history", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_authorization {
        req_builder = req_builder.header("Authorization", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TemplateAssignmentResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TemplateAssignmentResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAccountSettingsAssignmentError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// List account settings assignments.
pub async fn list_account_settings_assignments(
    configuration: &configuration::Configuration,
    account_id: Option<&str>,
    template_id: Option<&str>,
    template_version: Option<&str>,
    target: Option<&str>,
    target_type: Option<&str>,
    limit: Option<i32>,
    pagetoken: Option<&str>,
    sort: Option<&str>,
    order: Option<&str>,
    include_history: Option<bool>,
    authorization: Option<&str>,
) -> Result<models::TemplateAssignmentListResponse, Error<ListAccountSettingsAssignmentsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_account_id = account_id;
    let p_template_id = template_id;
    let p_template_version = template_version;
    let p_target = target;
    let p_target_type = target_type;
    let p_limit = limit;
    let p_pagetoken = pagetoken;
    let p_sort = sort;
    let p_order = order;
    let p_include_history = include_history;
    let p_authorization = authorization;

    let uri_str = format!(
        "{}/v1/account_settings_assignments/",
        configuration.base_path
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_account_id {
        req_builder = req_builder.query(&[("account_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_template_id {
        req_builder = req_builder.query(&[("template_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_template_version {
        req_builder = req_builder.query(&[("template_version", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_target {
        req_builder = req_builder.query(&[("target", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_target_type {
        req_builder = req_builder.query(&[("target_type", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_pagetoken {
        req_builder = req_builder.query(&[("pagetoken", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort {
        req_builder = req_builder.query(&[("sort", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_order {
        req_builder = req_builder.query(&[("order", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_history {
        req_builder = req_builder.query(&[("include_history", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_authorization {
        req_builder = req_builder.header("Authorization", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TemplateAssignmentListResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TemplateAssignmentListResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListAccountSettingsAssignmentsError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Update an account settings assignment. Call this method to retry failed assignments or migrate the settings in child accounts to a new version.
pub async fn update_account_settings_assignment(
    configuration: &configuration::Configuration,
    assignment_id: &str,
    if_match: &str,
    update_template_assignment_request: models::UpdateTemplateAssignmentRequest,
    authorization: Option<&str>,
) -> Result<models::TemplateAssignmentResponse, Error<UpdateAccountSettingsAssignmentError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_assignment_id = assignment_id;
    let p_if_match = if_match;
    let p_update_template_assignment_request = update_template_assignment_request;
    let p_authorization = authorization;

    let uri_str = format!(
        "{}/v1/account_settings_assignments/{assignment_id}",
        configuration.base_path,
        assignment_id = crate::apis::urlencode(p_assignment_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("If-Match", p_if_match.to_string());
    if let Some(param_value) = p_authorization {
        req_builder = req_builder.header("Authorization", param_value.to_string());
    }
    req_builder = req_builder.json(&p_update_template_assignment_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TemplateAssignmentResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TemplateAssignmentResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateAccountSettingsAssignmentError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
